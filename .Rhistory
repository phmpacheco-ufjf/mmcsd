proj_sitrep()
install.packages("usethis")
library(usethis)
proj_sitrep()
library(devtools)
load_all()
clm <- function(formula, waves, ids, weights, stratum, cluster, data, sigma = "identity") {
call <- match.call(expand.dots = FALSE) # Capture function call
modelFrame <- transformCallToFrame(call)
modelComponents <- getModelComponentsFromModelFrame(modelFrame)
clmCheckRequirements(modelComponents, sigma)
sigma <- getSigmaMatrix(sigma, modelComponents)
wideModelComponents <- setLongModelComponentsToWide(modelComponents)
individuals <- setWideModelComponentsToList(wideModelComponents)
fit <- fitModel(individuals, sigma)
fit <- organizeResults(fit, call, formula, wideModelComponents)
return(fit)
}
clm(1,2,3,4,5,6,7,8,9)
clm(1,2,3,4,5,6,7,8)
clm(1,2,3,4,5,6,7,8)
devtools::document()
rm(list=c('ckm'))
rm(list=c('clm'))
devtools::document()
Sys.setenv(NOT_CRAN = "false")
Sys.setenv(NOT_CRAN = "false")
check_for_cran(path = ".", email = NULL, check_args = "--as-cran",
env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "true",
`NOT_CRAN` = "false"), platforms = NULL, ...)
check_for_cran(path = ".", email = NULL, check_args = "--as-cran",
env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "true",
'_R_CHECK_CRAN_INCOMING_'="true",
`NOT_CRAN` = "false"), platforms = NULL, ...)
devtools::check(document = FALSE, env_vars=c(`_R_CHECK_FORCE_SUGGESTS_ `= "TRUE"))
devtools::check(document = FALSE, env_vars=c(`NOT_CRAN`= "TRUE"))
devtools::check(document = FALSE, env_vars=c(`NOT_CRAN`= "false"))
install.packages("utils")
install.packages("utils")
install.packages("utils")
library(utils)
utils::globalVariables("ai", "hi", "id" ,"ji")
utils::globalVariables(c("ai", "hi", "id" ,"ji"))
devtools::check(document = FALSE, env_vars=c(`NOT_CRAN`= "false"))
devtools::check()
devtools::check(document = FALSE, env_vars=c(`NOT_CRAN`= "TRUE"))
?clm
?fitTheta
?cov_clm
library(clm)
?clm
devtools::check(document = FALSE, env_vars=c(`NOT_CRAN`= "TRUE"))
library(clm)
devtools::build()
R CMD check
devtools::test()
getwd()
devtools::check()
notes()
utils::globalVariables(c( '.', 'ai' ,'hi', 'id', 'ji', 'mui', 'resi', 'sigmaThetaExprList', 'value', 'wave' ,'wi', 'xi', 'yi', 'zi'))
devtools::check()
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check()
devtools::check()
devtools::check_win_*()
devtools::check_win_*()
devtools::check_win_*()
devtools::check_win_*()
devtools::check_win_*(
)
rhub::check()
help(rhub::check())
devtools::check_win_devel()
library(rhub)
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
rhub::check_on_linux()
gustavoaeida2002@gmail.com
rhub::check_on_linux()
rhub::check_on_linux()
library(rhub)
rhub::check_on_linux()
library(rhub)
rhub::check_on_linux()
rhub::check_on_linux()
rhub::validate_email()
rhub::validate_email()
dde52e505aa3451eb4fcf6f884ccabb2
rhub::validate_email()
rhub::check_on_linux()
rhub::validate_email()
rhub::validate_email()
0
rhub::check_on_linux()
rhub::check_on_macos()
rhub::platforms()
rhub::check_on_macos()
rhub::check()
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check(document = FALSE, args = c('--as-cran'))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
fit <- clm(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
summary(fit)
sigmaThetaExpr_viewer("UCM", 5)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
summary(fit)
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
summary(fit)
sigmaThetaExpr_viewer("UCM", 5)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
library(mmcsd)
devtools::check()
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
summary(fit)
)fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
summary(fitTheta)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
summary(fitTheta)
summary(fit)
summary(fit)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "AR1",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "AH1",
optimParams = list(par = c(7, 5))
)
sigmaThetaExpr_viewer("AH1", 5)
sigmaThetaExpr_viewer("AR1", 5)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "AR1",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "ARH1",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "AH1",
optimParams = list(par = c(7, 5))
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
fitTheta
summary(fitTheta)
class(fitTheta)
class(fitTheta)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
class(fitTheta)
summary(fitTheta)
devtools::check()
fit <- mmcsd(
score ~ wave + ageg + ecacg + qualifg,
waves = wave, ids = id,
weights = weight, stratum = strata, cluster = cluster,
data = example_data, sigma = "exchangeable"
)
fitTheta <- cov_mmcsd(fit,
fittingType = "PML", sigmaThetaExpr = "UCM",
optimParams = list(par = c(7, 5))
)
summary(fitTheta)
class(fitTheta)
class(fit)
library(mmcsd)
library(mmcsd)
devtools::install_github("phmpacheco-ufjf/mmcsd")
library(mmcsd)
getwd()
exemple_data="/./jfsalvandotodos/"
exemple_data
exemple_data=/../jfsalvandotodos/
exemple_data=/../jfsalvandotodos/
exemple_data=/../jfsalvandotodos.db/
exemple_data=load(/../jfsalvandotodos.db/)
exemple_data=load('/../jfsalvandotodos.db/')
exemple_data=read.csv('/../R-mmcsd/mS_JuizdeFora.csv')
exemple_data
exemple_data=exemple_data[which(exemple_data$epi_week=='2022.13')]
exemple_data=exemple_data[,which(exemple_data$epi_week=='2022.13')]
exemple_data=exemple_data[which(exemple_data$epi_week=='2022.13',)]
exemple_data=exemple_data[which(exemple_data$epi_week=='2022.13'),]
exemple_data
length(exemple_data)
nrows(exemple_data)
nrow(exemple_data)
class(exemple_data$confirmed)
fit=mmcsd(deaths~confirmed+vaccinated1,ids=id,waves = date,data=exemple_data)
fit=mmcsd(deaths~confirmed+vaccinated,ids=id,waves = date,data=exemple_data)
exemple_data=exemple_data[which(exemple_data$type=='ms'),]
fit=mmcsd(deaths~confirmed+vaccinated,ids=id,waves = date,data=exemple_data)
summary(fit)
fit=mmcsd(deaths~confirmed+vaccinated,ids=id,waves = date,data=exemple_data,sigma = 'exchangeable')
summary(fit)
fit=mmcsd(deaths~confirmed+vaccinated+vaccinated2+vaccinated3+vaccinated_single_dose,ids=id,waves = date,data=exemple_data,sigma = 'exchangeable')
summary(fit)
fit=mmcsd(confirmed~deaths+vaccinated+vaccinated2+vaccinated3+vaccinated_single_dose,ids=id,waves = date,data=exemple_data,sigma = 'exchangeable')
summary(fit)
person()
help(person)
library(devtools)
devtools::check()
devtools::check()
devtools::check()
library(mmcsd)
devtools::check()
library(devtools)
devtools::check()
devtools::check()
devtools::check()
getwd()
devtools::check()
devtools::check(env_vars = c(NOT_CRAN = "F"))
devtools::build()
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
rhub::platforms()
devtools::check_rhub()
devtools::build()
devtools::build()
devtools::release()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
library(mmcsd)
help("mmcsd")
update(mmcsd())
install.packages("mmcsd")
install.packages("mmcsd")
help("mmcsd")
library(mmcsd)
help("mmcsd")
devtools::install_github("phmpacheco-ufjf/mmcsd")
help("mmcsd")
library(mmcsd)
help("mmcsd")
